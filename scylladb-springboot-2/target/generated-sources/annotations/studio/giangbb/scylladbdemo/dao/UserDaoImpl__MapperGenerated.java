package studio.giangbb.scylladbdemo.dao;

import com.datastax.oss.driver.api.core.PagingIterable;
import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.Row;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import com.datastax.oss.driver.internal.querybuilder.update.DefaultUpdate;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import studio.giangbb.scylladbdemo.model.User;
import studio.giangbb.scylladbdemo.model.UserHelper__MapperGenerated;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class UserDaoImpl__MapperGenerated extends DaoBase implements UserDao {
  private static final Logger LOG = LoggerFactory.getLogger(UserDaoImpl__MapperGenerated.class);

  private final UserHelper__MapperGenerated userHelper;

  private final PreparedStatement insertUserStatement;

  private final PreparedStatement getUserByIdStatement;

  private final PreparedStatement getAllUsersStatement;

  private final PreparedStatement updateUserStatement;

  private final PreparedStatement deleteUserStatement;

  private final PreparedStatement getUsersOlderThanAgeStatement;

  private final PreparedStatement getByUserNameStatement;

  private UserDaoImpl__MapperGenerated(MapperContext context,
      UserHelper__MapperGenerated userHelper, PreparedStatement insertUserStatement,
      PreparedStatement getUserByIdStatement, PreparedStatement getAllUsersStatement,
      PreparedStatement updateUserStatement, PreparedStatement deleteUserStatement,
      PreparedStatement getUsersOlderThanAgeStatement, PreparedStatement getByUserNameStatement) {
    super(context);
    this.userHelper = userHelper;
    this.insertUserStatement = insertUserStatement;
    this.getUserByIdStatement = getUserByIdStatement;
    this.getAllUsersStatement = getAllUsersStatement;
    this.updateUserStatement = updateUserStatement;
    this.deleteUserStatement = deleteUserStatement;
    this.getUsersOlderThanAgeStatement = getUsersOlderThanAgeStatement;
    this.getByUserNameStatement = getByUserNameStatement;
  }

  @Override
  public void insertUser(User user) {
    BoundStatementBuilder boundStatementBuilder = insertUserStatement.boundStatementBuilder();
    userHelper.set(user, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public User getUserById(int id) {
    BoundStatementBuilder boundStatementBuilder = getUserByIdStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.setInt("id", id);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToSingleEntity(boundStatement, userHelper);
  }

  @Override
  public PagingIterable<User> getAllUsers() {
    BoundStatementBuilder boundStatementBuilder = getAllUsersStatement.boundStatementBuilder();
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, userHelper);
  }

  @Override
  public void updateUser(User user) {
    BoundStatementBuilder boundStatementBuilder = updateUserStatement.boundStatementBuilder();
    userHelper.set(user, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void deleteUser(User user) {
    BoundStatementBuilder boundStatementBuilder = deleteUserStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.setInt("id", user.getId());
    boundStatementBuilder = boundStatementBuilder.setInt("user_age", user.getUserAge());
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public User getUser(Row row) {
    return userHelper.get(row, false);
  }

  @Override
  public BoundStatement setUser(BoundStatement udtValue, User user) {
    return userHelper.set(user, udtValue, NullSavingStrategy.DO_NOT_SET, false);
  }

  @Override
  public PagingIterable<User> getUsersOlderThanAge(int userAge) {
    BoundStatementBuilder boundStatementBuilder = getUsersOlderThanAgeStatement.boundStatementBuilder();
    NullSavingStrategy nullSavingStrategy = NullSavingStrategy.DO_NOT_SET;
    boundStatementBuilder = boundStatementBuilder.setInt("userAge", userAge);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, userHelper);
  }

  @Override
  public PagingIterable<User> getByUserName(String username) {
    BoundStatementBuilder boundStatementBuilder = getByUserNameStatement.boundStatementBuilder();
    NullSavingStrategy nullSavingStrategy = NullSavingStrategy.DO_NOT_SET;
    if (username != null || nullSavingStrategy == NullSavingStrategy.SET_TO_NULL) {
      boundStatementBuilder = boundStatementBuilder.set("username", username, String.class);
    }
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToEntityIterable(boundStatement, userHelper);
  }

  public static CompletableFuture<UserDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      UserHelper__MapperGenerated userHelper = new UserHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        userHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `insertUser(studio.giangbb.scylladbdemo.model.User)`:
      SimpleStatement insertUserStatement_simple = userHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method insertUser(studio.giangbb.scylladbdemo.model.User)",
          context.getSession().getName(),
          insertUserStatement_simple.getQuery());
      CompletionStage<PreparedStatement> insertUserStatement = prepare(insertUserStatement_simple, context);
      prepareStages.add(insertUserStatement);
      // Prepare the statement for `getUserById(int)`:
      SimpleStatement getUserByIdStatement_simple = userHelper.selectByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method getUserById(int)",
          context.getSession().getName(),
          getUserByIdStatement_simple.getQuery());
      CompletionStage<PreparedStatement> getUserByIdStatement = prepare(getUserByIdStatement_simple, context);
      prepareStages.add(getUserByIdStatement);
      // Prepare the statement for `getAllUsers()`:
      SimpleStatement getAllUsersStatement_simple = userHelper.selectByPrimaryKeyParts(0).build();
      LOG.debug("[{}] Preparing query `{}` for method getAllUsers()",
          context.getSession().getName(),
          getAllUsersStatement_simple.getQuery());
      CompletionStage<PreparedStatement> getAllUsersStatement = prepare(getAllUsersStatement_simple, context);
      prepareStages.add(getAllUsersStatement);
      // Prepare the statement for `updateUser(studio.giangbb.scylladbdemo.model.User)`:
      SimpleStatement updateUserStatement_simple = SimpleStatement.newInstance(((DefaultUpdate)userHelper.updateByPrimaryKey()).asCql());
      LOG.debug("[{}] Preparing query `{}` for method updateUser(studio.giangbb.scylladbdemo.model.User)",
          context.getSession().getName(),
          updateUserStatement_simple.getQuery());
      CompletionStage<PreparedStatement> updateUserStatement = prepare(updateUserStatement_simple, context);
      prepareStages.add(updateUserStatement);
      // Prepare the statement for `deleteUser(studio.giangbb.scylladbdemo.model.User)`:
      SimpleStatement deleteUserStatement_simple = userHelper.deleteByPrimaryKeyParts(2).build();
      LOG.debug("[{}] Preparing query `{}` for method deleteUser(studio.giangbb.scylladbdemo.model.User)",
          context.getSession().getName(),
          deleteUserStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteUserStatement = prepare(deleteUserStatement_simple, context);
      prepareStages.add(deleteUserStatement);
      // Prepare the statement for `getUsersOlderThanAge(int)`:
      SimpleStatement getUsersOlderThanAgeStatement_simple = replaceKeyspaceAndTablePlaceholders("select * from user_profile where user_age > :userAge ALLOW FILTERING", context, userHelper);
      LOG.debug("[{}] Preparing query `{}` for method getUsersOlderThanAge(int)",
          context.getSession().getName(),
          getUsersOlderThanAgeStatement_simple.getQuery());
      CompletionStage<PreparedStatement> getUsersOlderThanAgeStatement = prepare(getUsersOlderThanAgeStatement_simple, context);
      prepareStages.add(getUsersOlderThanAgeStatement);
      // Prepare the statement for `getByUserName(java.lang.String)`:
      SimpleStatement getByUserNameStatement_simple = replaceKeyspaceAndTablePlaceholders("select * from user_profile where username = :username", context, userHelper);
      LOG.debug("[{}] Preparing query `{}` for method getByUserName(java.lang.String)",
          context.getSession().getName(),
          getByUserNameStatement_simple.getQuery());
      CompletionStage<PreparedStatement> getByUserNameStatement = prepare(getByUserNameStatement_simple, context);
      prepareStages.add(getByUserNameStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (UserDao) new UserDaoImpl__MapperGenerated(context,
              userHelper,
              CompletableFutures.getCompleted(insertUserStatement),
              CompletableFutures.getCompleted(getUserByIdStatement),
              CompletableFutures.getCompleted(getAllUsersStatement),
              CompletableFutures.getCompleted(updateUserStatement),
              CompletableFutures.getCompleted(deleteUserStatement),
              CompletableFutures.getCompleted(getUsersOlderThanAgeStatement),
              CompletableFutures.getCompleted(getByUserNameStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static UserDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
